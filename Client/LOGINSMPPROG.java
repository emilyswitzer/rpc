import com.distinct.rpc.*;
import java.io.IOException;
import java.net.InetAddress;

/**
 * This class was automatically generated by Jrpcgen from the RPC/XDR file "stdin". <br>
 * It defines the client interface to a server implementing the "LOGINSMPPROG" interface.
 */
public class LOGINSMPPROG extends JRPCClient {

/** Program ID of the interface. */
public static final int LOGINSMPPROG = 78;

/**
 * Creates and connects an RPC client to a server that implements the "LOGINSMPPROG" interface.
 * Calls the remote portmapper to look up the port of the server.
 * @param host       The host on which the server is running.
 * @param stream     Set to true for a TCP connection or false for UDP.
 * @exception        RPCError Thrown if the call fails for any reason.
 */
public LOGINSMPPROG(InetAddress host, boolean stream) throws RPCError {
  super(host, LOGINSMPPROG, LOGINSMPVERS, stream);
}

/**
 * Creates and connects an RPC client to a server that implements the "LOGINSMPPROG" interface.
 * The client is connected to the known server port without any interaction with the portmapper.
 * @param host       The host on which the server is running.
 * @param port       The port on which the server is listening.
 * @param stream     Set to true for a TCP connection or false for UDP.
 * @exception        RPCError Thrown if the call fails for any reason.
 */

public LOGINSMPPROG(InetAddress host, int port, boolean stream) throws RPCError {
  super(host, LOGINSMPPROG, LOGINSMPVERS, port, stream);
}

/**
 * Creates an RPC client for a server that implements the "LOGINSMPPROG" interface.
 * The client is initialized with the specified protocol client.
 * @param protocol   The protocol object that implements the client connection.
 */

public LOGINSMPPROG(ClientGeneric protocol) {
  super(protocol);
}

/** Version ID of the interface. */
public static final int LOGINSMPVERS = 1;

public static final int login = 1;

/**
 * Stub method that invokes the server function "login" (version 1).
 * @param arg1          input parameter of the remote call.
 * @return           The return value of the remote call.
 * @exception        java.io.IOException Thrown if the call fails because the socket connection fails.
 * @exception        RPCError Thrown if the call fails for any other reason.
 */
public String login_1(String arg1) throws RPCError, IOException {
  XDRstring arg_ref = new XDRstring();
  arg_ref.value = arg1;

  XDRstring retval = new XDRstring();
  GetClient().Call(login, arg_ref, retval);

  return retval.value;
}
}
